// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Hotel {
  id          Int       @id @default(autoincrement())
  name        String
  location    String?
  description String?
  rooms       Room[]
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Room {
  id        Int     @id @default(autoincrement())
  number    String
  type      String?
  price     Float?
  hotel     Hotel   @relation(fields: [hotelId], references: [id])
  hotelId   Int
  bookings  Booking[]
  Available Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Payment {
  id          String   @id @default(uuid())
  amount      Float
  method      String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relation to Booking
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String
}


model Reservation {
  id         Int      @id @default(uuid())
  guestName  String
  checkIn    DateTime
  checkOut   DateTime
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  hotelId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Transaction {
  id        String     @id @default(uuid())
  amount    Int
  method    String
  status    String
  hotel     Hotel   @relation(fields: [hotelId], references: [id])
  hotelId   Int
  booking   Booking?  @relation(fields: [bookingId], references: [id])
  BookingId Strings?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Booking {
  id         Int      @id @default(uuid())
  guestName  String
  checkIn    DateTime
  checkOut   DateTime
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  hotelId    String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // one-to-many relation
  payments   Payment[]
}
