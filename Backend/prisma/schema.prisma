// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================
// MODELS
// =============================

model Hotel {
  id          String       @id @default(uuid())
  name        String
  location    String?
  description String?
  rooms       Room[]
  bookings    Booking[]
  transactions Transaction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Room {
  id        String     @id @default(uuid())
  number    String
  type      String?
  price     Float?
  available Boolean     @default(true)

  hotel     Hotel       @relation(fields: [hotelId], references: [id])
  hotelId   String

  bookings  Booking[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Booking {
  id            String       @id @default(uuid())
  guestName     String
  checkIn       DateTime
  checkOut      DateTime

  // Relations
  room          Room         @relation(fields: [roomId], references: [id])
  roomId        String

  hotel         Hotel        @relation(fields: [hotelId], references: [id])
  hotelId       String

  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  payments      Payment[]
  transaction   Transaction?

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Reservation {
  id         String     @id @default(uuid())
  guestName  String
  checkIn    DateTime
  checkOut   DateTime

  hotel      Hotel      @relation(fields: [hotelId], references: [id])
  hotelId    String

  room       Room       @relation(fields: [roomId], references: [id])
  roomId     String

  bookings   Booking[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  method      String
  status      String

  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id        String     @id @default(uuid())
  amount    Float
  method    String
  status    String

  hotel     Hotel      @relation(fields: [hotelId], references: [id])
  hotelId   String

  booking   Booking?   @relation(fields: [bookingId], references: [id])
  bookingId String?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
