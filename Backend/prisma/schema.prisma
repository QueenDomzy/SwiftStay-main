// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id          String        @id @default(uuid())
  name        String
  location    String?
  description String?
  rooms       Room[]
  bookings    Booking[]
  transactions Transaction[]
  reservations Reservation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Room {
  id        String    @id @default(uuid())
  number    String
  type      String?
  price     Float?
  available Boolean   @default(true)
  hotelId   String
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
  bookings  Booking[]
  reservations Reservation[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id          String        @id @default(uuid())
  guestName   String
  checkIn     DateTime
  checkOut    DateTime
  roomId      String
  room        Room          @relation(fields: [roomId], references: [id])
  hotelId     String
  hotel       Hotel         @relation(fields: [hotelId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  payments     Payment[]
  reservations Reservation[]
  transactions Transaction[]
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float
  method    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

model Reservation {
  id        String   @id @default(uuid())
  guestName String
  checkIn   DateTime
  checkOut  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])

  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])
}

model Transaction {
  id        String   @id @default(uuid())
  amount    Float
  method    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])

  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])
}
