generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Render will inject DATABASE_URL automatically
}

// ======================
// User Model
// ======================
model User {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  password  String
  isOwner   Boolean     @default(false)
  hotels    Hotel[]
  bookings  Booking[]
  reservations Reservation[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// ======================
// Hotel Model
// ======================
model Hotel {
  id          String        @id @default(uuid())
  name        String
  location    String
  description String?
  rating      Float?        @default(0.0)
  ownerId     String?
  owner       User?         @relation(fields: [ownerId], references: [id])
  rooms       Room[]
  reservations Reservation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// ======================
// Room Model
// ======================
model Room {
  id        String    @id @default(uuid())
  hotelId   String
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
  name      String
  type      String
  price     Float
  capacity  Int
  bookings  Booking[]
  available Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ======================
// Booking Model
// ======================
model Booking {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  roomId     String
  room       Room      @relation(fields: [roomId], references: [id])
  startDate  DateTime
  endDate    DateTime
  status     String    @default("pending")
  payment    Payment?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// ======================
// Reservation Model
// ======================
model Reservation {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  date      DateTime
  status    String   @default("pending")
}

// ======================
// Payment Model
// ======================
model Payment {
  id          String   @id @default(uuid())
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
  amount      Float
  method      String
  status      String   @default("pending")
  transaction String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
