model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  name         String?
  reservations Reservation[]
  bookings     Booking[]
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Hotel {
  id           String        @id @default(uuid())
  name         String
  location     String
  description  String?
  rating       Float         @default(0.0)
  reservations Reservation[]
  bookings     Booking[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Reservation {
  id        String   @id @default(uuid())
  userId    String
  hotelId   String
  checkIn   DateTime
  checkOut  DateTime
  status    String   @default("pending")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  hotel  Hotel  @relation(fields: [hotelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id          String   @id @default(uuid())
  userId      String
  hotelId     String
  reservationId String?
  status      String   @default("confirmed")

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  hotel       Hotel       @relation(fields: [hotelId], references: [id])
  reservation Reservation? @relation(fields: [reservationId], references: [id])
  payments    Payment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  bookingId String
  amount    Float
  method    String
  status    String   @default("pending")

  // Relations
  booking   Booking  @relation(fields: [bookingId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
